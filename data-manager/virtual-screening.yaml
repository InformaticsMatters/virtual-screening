---
# A Data-Manager Job definition, defining 1 or more Data Manager Jobs.
# For v1 the 'kind-version' must be '2021.1'
kind: DataManagerJobDefinition
kind-version: '2021.1'

# An arbitrary name (ignored by the DataManager)
name: Virtual screening tools using RDKit, OpenBabel and other open source tools

# The 'collection' for the jobs named in this definition.
#
# A collection ensures that all of the Jobs have unique names so that they
# can be easily identified. A collection can be used by more than one
# JobDefinition file but all the Job identities in a given collection must
# be unique. i.e. our "shard-molecules" Job ID is unique because
# it's in the collection "im-rdkit-virtual-screening" and there is no
# other "shard-molecules" in the same collection. It is different
# to any "shard-molecules" Job identity in any other collection.
# The collection must only container lower-case letters, numbers and a hyphen
# and must begin with a letter.
collection: im-virtual-screening

# The repository where this definition (and the code for the Job) can be found.
repository-url: https://github.com/InformaticsMatters/virtual-screening/virtual-screening.yaml
# The repository tag.
# All definitions are expected to reside in a repository that has been tagged.
repository-tag: '1.0.3'

# Job definitions.
# A list of jobs indexed using a unique identity (i.e. "shared-molecules").
# Job identities must only container lower-case letters, numbers or a hyphen
# and must begin with a letter.
jobs:

  # simple (non-nextflow) jobs ------------------------------------------------
  # Where image->type is 'simple' (the default)

  shard:
    # An arbitrary name.
    # The job is actually referred to in the API using the job (above),
    # e.g. 'shard-molecules'. The name is simply here as a human-friendly
    # reference.
    name: Shard candidate molecules
    # Human readable description
    description: >-
      Standardize input molecules and generate shards based on heavy atom count and
      calculate a range of molecular properties used for filtering.
      Basic properties of the molecules, including the vendor code are
      stored in a data structure that can be shared between multiple datasets.
    # The job version.
    # Any string, but typically something compatible with SemVer 2.0.0
    version: '1.0.0'
    # An arbitrary category and keywords.3
    # Provided to facilitate Job filtering in the client.
    category: virtual screening
    keywords:
    - rdkit
    - ligand preparation
    # link to documetnation for the job
    doc-url: https://discourse.squonk.it/t/job-shard/67
    # The container image that contains the Job implementation
    # (in v1, these are hosted on Docker Hub)
    # ... along with the image tag
    # and the project directory (mount-point) to use for the Project data.
    # You can also add a type enumeration ('simple' or 'nextflow'),
    # although this field is optional.
    image:
      name: informaticsmatters/vs-prep
      tag: 'latest'
      project-directory: /data
      working-directory: /data
      type: simple
    # The command that will be used as the Kubernetes Pod 'command'
    # (after variable expansion). This is a jinja2 template with its variables
    # described in the `variables` block below (A JSONSchema block).
    command: >-
      /code/shard.py -i{% for file in inputFiles %} '/data/{{ file }}'{% endfor %}
      -s '{{ supplierName }}'
      -v '{{ supplierVersion }}' -o '{{ outputDir }}' -n {{ codeFieldIndex }}
      --errors-file '{{ supplierName }}_{{ supplierVersion }}_errors.smi'
      --interval 10000
    # Command variables - using JSONSchema to allow for simplified client
    # presentation to the user. 'inputs' and 'outputs' use custom types
    # and typically consist of the definition of input files and output
    # directories and files. 'options' are generic JSONSchema types,
    # like 'strings', 'integers' etc.
    # Every 'variable' expected by the command must be represented by a
    # corresponding property in 'inputs', 'outputs' or 'options'.
    variables:
      order:
        options:
        - supplierName
        - supplierVersion
        - codeFieldIndex
        - outputDir
      inputs:
        type: object
        required:
        - inputFiles
        properties:
          inputFiles:
            title: Molecules to shard
            mime-types:
            - squonk/x-smiles
            - chemical/x-csv
            multiple: true
            type: file
      outputs:
        type: object
        properties:
          hacSlices:
            title: HAC slices
            mime-types:
            - chemical/x-csv
            creates: '{{ outputDir }}/{{ supplierName }}_{{ supplierVersion }}/*.smi'
            type: files
          shards:
            title: Sharded molecule data
            mime-types:
            - appliction/json
            creates: '{{ outputDir }}/sha256/*/*/*.json'
            type: files
      options:
        type: object
        required:
        - supplierName
        - supplierVersion
        - codeFieldIndex
        - outputDir
        properties:
          codeFieldIndex:
            title: Index of vendor code field
            default: 2
            minimum: 1
            type: integer
          outputDir:
            title: Output directory
            type: string
            default: molecules
          supplierName:
            title: Source of the molecules
            type: string
            format: simple
          supplierVersion:
            title: Version of the molecule source
            type: string

  filter:
    name: Filter candidate molecules
    description: >-
      Filter molecules based on molecular properties. The inputs are those generated using the
      shard job.
    version: '1.0.0'
    category: virtual screening
    keywords:
    - rdkit
    - ligand preparation
    - filter
    doc-url: https://discourse.squonk.it/t/job-filter/68
    image:
      name: informaticsmatters/vs-prep
      tag: 'latest'
      project-directory: /data
      working-directory: /data
    command: >-
      /code/filter.py -i{% for dir in inputDir %} '/data/{{ dir }}'{% endfor %}
      -o '{{ outputFile }}'
      --min-hac {{ minHac }}
      --max-hac {{ maxHac }}
      {% if minRotb is defined %}--min-rotb {{ minRotb }}{% endif %}
      {% if maxRotb is defined %}--max-rotb {{ maxRotb }}{% endif %}
      {% if minRings is defined %}--min-rings {{ minRings }}{% endif %}
      {% if maxRings is defined %}--max-rings {{ maxRings }}{% endif %}
      {% if minAroRings is defined %}--min-aro-rings {{ minAroRings }}{% endif %}
      {% if maxAroRings is defined %}--max-aro-rings {{ maxAroRings }}{% endif %}
      {% if minChiralCenters is defined %}--min-chiral-centres {{ minChiralCenters }}{% endif %}
      {% if maxChiralCenters is defined %}--max-chiral-centres {{ maxChiralCenters }}{% endif %}
      {% if minUndefinedChiralCenters is defined %}--min-undefined-chiral-centres {{ minUndefinedChiralCenters }}{% endif %}
      {% if maxUndefinedChiralCenters is defined %}--max-undefined-chiral-centres {{ maxUndefinedChiralCenters }}{% endif %}
      {% if minSp3 is defined %}--min-sp3 {{ minSp3 }}{% endif %}
      {% if maxSp3 is defined %}--max-sp3 {{ maxSp3 }}{% endif %}
    variables:
      order:
        options:
        - outputFile
        - minHac
        - maxHac
        - minRotb
        - maxRotb
        - minRings
        - maxRings
        - minAroRings
        - maxAroRings
        - minChiralCentres
        - maxChiralCentres
        - minUndefinedChiralCentres
        - maxUndefinedChiralCentres
        - minSp3
        - maxSp3
      inputs:
        type: object
        required:
        - inputDir
        properties:
          inputDir:
            title: Directories with molecules to filter
            type: directory
            multiple: true
      outputs:
        type: object
        properties:
          outputFile:
            title: Filtered output
            mime-types:
            - squonk/x-smiles
            creates: '{{ outputFile }}'
            type: file
      options:
        type: object
        required:
        - minHac
        - maxHac
        - outputFile
        properties:
          outputFile:
            title: Output file name
            type: string
            default: filtered.smi
          minHac:
            title: Minimum Heavy Atom Count
            type: integer
            minimum: 0
          maxHac:
            title: Maximum Heavy Atom Count
            type: integer
            minimum: 0
          minRotb:
            title: Minimum number of rotatable bonds
            type: integer
            minimum: 0
          maxRotb:
            title: Maximum number of rotatable bonds
            type: integer
            minimum: 0
          minRings:
            title: Minimum number of rings
            type: integer
            minimum: 0
          maxRings:
            title: Maximum number of rings
            type: integer
            minimum: 0
          minAroRings:
            title: Minimum number of aromatic rings
            type: integer
            minim: 0
          maxAroRings:
            title: Maximum number of aromatic rings
            type: integer
            minim: 0
          minChiralCentres:
            title: Minimum number of chiral centres
            type: integer
            minimum: 0
          maxChiralCentres:
            title: Maximum number of chiral centres
            type: integer
            minimum: 0
          minUndefinedChiralCentres:
            title: Minimum number of undefined chiral centres
            type: integer
            minimum: 0
          maxUndefinedChiralCentres:
            title: Maximum number of undefined chiral centres
            type: integer
            minimum: 0
          minSp3:
            title: Minimum sp3
            type: integer
            minimum: 0
          maxSp3:
            title: Maximum sp3
            type: integer
            minimum: 0

  max-min-picker:
    name: Select diverse subset of molecules
    description: >-
      Select a diverse subset of molecules using the RDKit MaxMin Picker.
      Morgan 2 fingerprints and Tanimoto distance is used.
    version: '1.0.0'
    category: virtual screening
    keywords:
    - rdkit
    - ligand preparation
    - diverse subset
    - filter
    doc-url: https://discourse.squonk.it/t/job-max-min-picker/69
    image:
      name: informaticsmatters/vs-prep
      tag: 'latest'
      project-directory: /data
      working-directory: /data
    command: >-
      /code/max_min_picker.py --input '/data/{{ inputFile }}'
      {% if seeds is defined %}--seeds{% for file in seeds %} '{{ file }}'{% endfor %}{% endif %}
      --output '{{ outputFile }}'
      --count {{ count }}
      {% if threshold is defined %}--threshold {{ threshold }}{% endif %}
      --interval 10000
    variables:
      inputs:
        type: object
        required:
        - inputFile
        properties:
          inputFile:
            title: Molecules to pick from
            mime-types:
            - squonk/x-smiles
            type: file
          seeds:
            title: Molecules that are already picked
            mime-types:
            - squonk/x-smiles
            type: file
            multiple: true
      outputs:
        type: object
        properties:
          outputFile:
            title: Output file
            mime-types:
            - chemical/x-csv
            creates: '{{ outputFile }}'
            type: file
      options:
        type: object
        required:
        - count
        properties:
          outputFile:
            title: Output file name
            type: string
            pattern: "^[A-Za-z0-9_/\\.\\-]+$"
            default: diverse.smi
          count:
            title: Number of molecules to pick
            type: integer
            minimum: 1
          threshold:
            title: Similarity threshold
            type: number
            minimum: 0
            maximum: 1

  prep-enum-conf-lists:
    name: Prepare enumeration and conformer lists
    description: >-
      Prepare lists of molecules that need enumeration of microstates, tautomers and undefined
      chiral centres, and those that need 3D conformer generation.
    version: '1.0.0'
    category: virtual screening
    keywords:
    - rdkit
    - ligand preparation
    - enumeration
    - conformer
    doc-url: https://discourse.squonk.it/t/job-prep-enum-conf-lists/70
    image:
      name: informaticsmatters/vs-prep
      tag: 'latest'
      project-directory: /data
      working-directory: /data
    command: >-
      /code/prepare_enum_conf_lists.py
      --input '/data/{{ inputFile }}'
      --data-dir '/data/{{ dataDir }}'
      --outfile-enum '{{ outputFileEnum }}'
      --outfile-conf '{{ outputFileConf }}'
    variables:
      inputs:
        type: object
        required:
        - inputFile
        - dataDir
        properties:
          inputFile:
            title: Molecules to evaluate
            mime-types:
            - chemical/x-csv
            type: file
          dataDir:
            title: Directory with sharded data
            type: directory
            default: molecules/sha256
      outputs:
        type: object
        properties:
          outputFileEnum:
            title: Molecules needing enumeration
            mime-types:
            - squonk/x-smiles
            creates: '{{ outputFileEnum }}'
            type: file
          outputFileConf:
            title: Molecules needing conformer generation
            mime-types:
            - squonk/x-smiles
            creates: '{{ outputFileConf }}'
            type: file
      options:
        type: object
        required:
        - outputFileEnum
        - outputFileConf
        properties:
          outputFileEnum:
            title: Filename for molecules needing enumeration
            type: string
            default: need-enum.smi
          outputFileConf:
            title: Filename for molecules needing 3D conformers
            type: string
            default: need-confs.smi

  assemble-conformers:
    name: Assemble conformers
    description: >-
      Assemble 3D conformers into a single SDF for suitable as input to docking.
    version: '1.0.0'
    category: virtual screening
    keywords:
    - ligand preparation
    doc-url: https://discourse.squonk.it/t/job-assemble-conformers/73
    image:
      name: informaticsmatters/vs-prep
      tag: 'latest'
      project-directory: /data
      working-directory: /data
    command: >-
      /code/assemble_conformers.py
      --input '/data/{{ inputFile }}'
      --data-dir '/data/{{ dataDir }}'
      --mode {{ mode }}
      --output '{{ outputFile }}'
      {% if excludeBase is defined %}-exclude-base{% endif %}
      {% if excludeTautomers is defined %}-exclude-tautomers{% endif %}
      {% if excludeMicrostates is defined %}-exclude-microstates{% endif %}
      --interval 1000
    variables:
      order:
        inputs:
        - inputFile
        - dataDir
        options:
        - outputFile
        - mode
        - excludeBase
        - excludeTautomers
        - excludeMicrostates
      inputs:
        type: object
        required:
        - inputFile
        - dataDir
        properties:
          inputFile:
            title: Molecules to assemble
            mime-types:
            - squonk/x-smiles
            type: file
          dataDir:
            title: Directory with sharded data
            type: directory
            default: molecules/sha256
      outputs:
        type: object
        properties:
          outputFile:
            title: Assembled conformers
            mime-types:
            - chemical/x-mdl-sdfile
            creates: '{{ outputFile }}'
            type: file
            annotation-properties:
              fields-descriptor:
                origin: squonk2-job
                description: Assemble conformers
                fields:
                  Energy:
                    type: number
                    description: >-
                      MMFF94 minimised energy
                    required: true
                    active: true
                  Energy_Delta:
                    type: number
                    description: >-
                      Energy difference to lowest energy conformer
                    required: true
                    active: true
                  std_smi:
                    type: string
                    description: >-
                      SMILES of the parent (un-enumerated) molecule
                    required: true
                    active: true
                  enum_smi:
                    type: string
                    description: >-
                      SMILES of the molecule
                    required: true
                    active: true
                  enum_code:
                    type: string
                    description: >-
                      Type of enumerated form. B=base molecule, T=tautomer, M=microstate
                    required: true
                    active: true
              service-execution:
                service_ref: 'https://discourse.squonk.it/t/job-ultrafast-shape-recognition/87'
      options:
        type: object
        required:
        - outputFile
        properties:
          outputFile:
            title: Filename for SDF output
            type: string
            default: candidates.sdf
          mode:
            title: Conformer mode
            type: string
            enum:
            - single
            - low-energy
          excludeBase:
            title: Exclude base molecules
            type: boolean
          excludeTautomers:
            title: Exclude enumerated tautomers
            type: boolean
          excludeMicrostates:
            title: Exclude enumerated microstates
            type: boolean

  obabel-convert:
    name: Convert molecule format
    description: >-
      Convert molecular formats using OpenBabel. Can be used to prepare a protein for docking.
      See the docs for more info of all the options.
    version: '1.0.0'
    category: virtual screening
    keywords:
    - protein preparation
    - openbabel
    doc-url: https://discourse.squonk.it/t/job-obabel-convert/77
    image:
      name: informaticsmatters/vs-prep
      tag: 'latest'
      project-directory: /data
      working-directory: /data
    command: >-
      obabel
      '/data/{{ inputFile }}'
      {{ options }}
      {% if options is defined %}{{ options }}{% endif %}
      -O '{{ outputFile }}'
    variables:
      inputs:
        type: object
        required:
        - inputFile
        properties:
          inputFile:
            title: Input file (e.g. pdb, pdbqt, mol or mol2 extension)
            mime-types:
            - chemical/x-pdb
            - chemical/x-pdbqt
            - chemical/x-mol2
            - chemical/x-mol
            type: file
      outputs:
        type: object
        properties:
          outputFile:
            title: Converted molecule
            mime-types:
            - chemical/x-pdb
            - chemical/x-pdbqt
            - chemical/x-mol2
            - chemical/x-mol
            creates: '{{ outputFile }}'
            type: file
      options:
        type: object
        required:
        - outputFile
        properties:
          outputFile:
            title: Filename for output (e.g. pdb, pdbqt, mol or mol2 extension)
            type: string
          options:
            title: Additional options. e.g. -p 7.0
            type: string

  pdb2pqr:
    name: Prepare protein using pdb2pqr
    description: >-
      Prepare a protein for docking by using pdb2pqr. This can replace missing heavy atoms
      and protonate the protein at a specific pH taking into account the local environment
      of titratable groups, such as the hydrogen bonding network.
    version: '1.0.0'
    category: virtual screening
    keywords:
    - protein preparation
    - pdb2pqr
    - protonation
    doc-url: https://discourse.squonk.it/t/job-pdb2pqr/76
    image:
      name: informaticsmatters/vs-prep
      tag: 'latest'
      project-directory: /data
      working-directory: /data
    command: >-
      pdb2pqr30 --with-ph {{ ph }}
      --titration-state-method propka
      --pdb-output '{{ outfileBasename }}.pdb'
      '/data/{{ inputFile }}'
      '{{ outfileBasename }}.pqr'
    variables:
      inputs:
        type: object
        required:
        - inputFile
        properties:
          inputFile:
            title: Input PDB file
            mime-types:
            - chemical/x-pdb
            type: file
      outputs:
        type: object
        properties:
          pdbFile:
            title: PDB file
            mime-types:
            - chemical/x-pdb
            creates: '{{ outfileBasename }}.pdb'
            type: file
          pqrFile:
            title: PQR file
            mime-types:
            - chemical/x-pqr
            creates: '{{ outfileBasename }}.pqr'
            type: file
          logFile:
            title: Log file
            mime-types:
            - text/plain
            creates: '{{ outfileBasename }}.log'
            type: file
      options:
        type: object
        required:
        - outfileBasename
        - ph
        properties:
          ph:
            title: pH to protonate at
            type: number
            default: 7
          outfileBasename:
            title: Base filename for output (do not include the extension)
            type: string

  conformers-for-mol:
    name: Generate 3D conformers of a molecule
    description: >-
      Generate a low energy 3D conformers. The input is a molfile or SMILES. The output is a SD file.
    version: '1.0.0'
    category: virtual screening
    keywords:
    - rdkit
    - conformer
    image:
      name: informaticsmatters/vs-prep
      tag: 'latest'
      project-directory: /data
      working-directory: /data
    command: >-
      /code/le_conformers_for_mol.py
        {% if inputMolfile is defined %}--input '{{ inputMolfile }}'{% endif %}
        {% if smiles is defined %}--smiles '{{ smiles }}'{% endif %}
        --output '{{ sdfout }}'
        --minimize-cycles {{ minimizeCycles }}
        --rms-threshold {{ rmsThreshold }}
        {% if removeHydrogens is defined %}--remove-hydrogens{% endif %}
    variables:
      order:
        options:
        - smiles
        - sdfout
        - minimizeCycles
        - rmsThreshold
        - removeHydrogens
      inputs:
        type: object
        properties:
          inputMolfile:
            title: Input molfile
            mime-types:
            - chemical/x-mdl-molfile
            type: file
      outputs:
        type: object
        properties:
          outfile:
            title: SDF file
            mime-types:
            - chemical/x-mdl-sdfile
            creates: '{{ sdfout }}'
            type: file

      options:
        type: object
        required:
        - sdfout
        - minimizeCycles
        - rmsThreshold
        - removeHydrogens
        properties:
          smiles:
            title: SMILES string for input
            type: string
          sdfout:
            title: Filename for output
            type: string
            default: conformers.sdf
          minimizeCycles:
            title: Number of minimization cycles
            type: integer
            default: 500
          rmsThreshold:
            type: number
            default: 1.0
          removeHydrogens:
            type: boolean
            default: true

  prepare-rdock:
    name: rDock prepare
    description: >-
      Prepare rDock configuration file (.prm file) and the cavity definition (.as file).
    version: '1.0.0'
    category: virtual screening
    keywords:
    - protein preparation
    - rdock
    doc-url: https://discourse.squonk.it/t/job-prepare-rdock/75
    image:
      name: informaticsmatters/vs-rdock
      tag: 'latest'
      project-directory: /data
      working-directory: /data
    command: >-
      /code/prepare_rdock.py
      --receptor '/data/{{ receptorFile }}'
      --ligand '/data/{{ ligandFile }}'
      --output '{{ outputBaseName }}'
    variables:
      inputs:
        type: object
        required:
        - receptorFile
        - ligandFile
        properties:
          receptorFile:
            title: MOL2 file for receptor
            mime-types:
            - chemical/x-mol2
            type: file
          ligandFile:
            title: Molfile file for ligand
            mime-types:
            - chemical/x-mdl-molfile
            type: file
      outputs:
        type: object
        properties:
          prmFile:
            title: Docking configuration file
            mime-types:
            - squonk/x-rdock-prm
            creates: '{{ outputBaseName }}.prm'
            type: file
          asFile:
            title: Cavity definition file
            mime-types:
            - squonk/x-rdock-as
            creates: '{{ outputBaseName }}.as'
            type: file
      options:
        type: object
        required:
        - outputBaseName
        properties:
          outputBaseName:
            title: Base name for output files
            type: string
            default: docking

  ultrafast-shape-recognition:
    name: USR shape similarity
    description: >-
      Filters molecules using 3D shape similarity and the USR, Electroshape or USRCAT algorithms
    version: '1.0.0'
    category: virtual screening
    keywords:
    - oddt
    - similarity
    - shape
    - usr
    - electroshape
    - usrcat
    - filter
    doc-url: https://discourse.squonk.it/t/job-ultrafast-shape-recognition/87
    image:
      name: informaticsmatters/vs-oddt
      tag: 'latest'
      project-directory: /data
      working-directory: /data
    command: >-
      /code/usr.py --inputs '/data/{{ inputFile }}'
      --query '{{ queryFile }}'
      --outfile '{{ outputFile }}'
      --method {{ method }}
      --threshold {{ threshold }}
      {% if groupBy is defined %}--group-by-field {{ groupBy }}{% endif %}
      --interval 1000
    variables:
      order:
        inputs:
        - queryFile
        - inputFile
        options:
        - method
        - threshold
        - groupBy
        - outputFile
      inputs:
        type: object
        required:
        - queryFile
        - inputFile
        properties:
          inputFile:
            title: Molecules to screen
            mime-types:
            - chemical/x-mdl-sdfile
            type: file
          queryFile:
            title: Query molecule
            mime-types:
            - chemical/x-mdl-molfile
            - chemical/x-mdl-sdfile
            type: file
      outputs:
        type: object
        properties:
          outputFile:
            title: Output file
            mime-types:
            - chemical/x-mdl-sdfile
            creates: '{{ outputFile }}'
            type: file
            annotation-properties:
              fields-descriptor:
                origin: squonk2-job
                description: Molecular shape similarity
                fields:
                  similarity:
                    expression: '{{ method }}_similarity'
                    type: number
                    description: >-
                      Shape similarity
                    required: true
                    active: true
              service-execution:
                service_ref: 'https://discourse.squonk.it/t/job-ultrafast-shape-recognition/87'
              derived-from: inputFile
      options:
        type: object
        required:
        - method
        - threshold
        - outputFile
        properties:
          method:
            title: USR method
            type: string
            enum:
            - usr
            - electroshape
            - usrcat
          outputFile:
            title: Output file name
            type: string
            default: usr-similarity.sdf
          threshold:
            title: Similarity threshold
            type: number
            minimum: 0
            maximum: 1
          groupBy:
            title: Group by field
            type: string
            default: std_smi

  rdkit-molprops:
    name: Molecular property calculations
    description: >-
      Calculates molecular properties using RDKit
    version: '1.0.0'
    category: virtual screening
    keywords:
    - rdkit
    - properties
    doc-url: 'https://discourse.squonk.it/t/job-rdkit-props/91'
    image:
      name: informaticsmatters/vs-prep
      tag: 'latest'
      project-directory: /data
      working-directory: /data
    command: >-
      /code/rdkit_props.py --input '/data/{{ inputFile }}'
      --outfile '{{ outputFile }}'
      {% if readHeader %}--read-header{% endif %}
      {% if writeHeader %}--write-header{% endif %}
      --delimiter '{{ separator }}'
      {% if sdfReadRecords is defined %}--sdf-read-records '{{ sdfReadRecords }}'{% endif %}
      {% if idColumn is defined %}--id-column '{{ idColumn }}'{% endif %}
      --interval 10000
    variables:
      inputs:
        type: object
        required:
        - inputFile
        properties:
          inputFile:
            title: Molecules
            mime-types:
            - chemical/x-mdl-sdfile
            - squonk/x-smiles
            - text/csv
            type: file
      outputs:
        type: object
        properties:
          outputFile:
            title: Output file
            mime-types:
            - chemical/x-mdl-sdfile
            - squonk/x-smiles
            - text/csv
            creates: '{{ outputFile }}'
            type: file
            annotation-properties:
              fields-descriptor:
                origin: squonk2-job
                description: Molecular property calculation
                fields:
                  hac:
                    type: integer
                    description: >-
                      Heavy atom count
                    required: true
                    active: true
                  num_rot_bonds:
                    type: integer
                    description: >-
                      Rotatable bond count
                    required: true
                    active: true
                  num_rings:
                    type: integer
                    description: >-
                      Number of rings
                    required: true
                    active: true
                  num_aro_rings:
                    type: integer
                    description: >-
                      Number of aromatic rings
                    required: true
                    active: true
                  num_cc:
                    type: integer
                    description: >-
                      Number of chiral centres
                    required: true
                    active: true
                  num_undef_cc:
                    type: integer
                    description: >-
                      Number of undefined chiral centres
                    required: true
                    active: true
                  num_sp3:
                    type: integer
                    description: >-
                      Number of SP3 hybridised carbons
                    required: true
                    active: true
                  logp:
                    type: number
                    description: >-
                      Crippen LogP
                    required: true
                    active: true
                  tpsa:
                    type: number
                    description: >-
                      Topological polar surface area
                    required: true
                    active: true
              service-execution:
                service_ref: 'https://discourse.squonk.it/t/job-rdkit-props/91'
              derived-from: inputFile
      options:
        type: object
        required:
        - outputFile
        properties:
          outputFile:
            title: Output file name
            type: string
            pattern: "^[A-Za-z0-9_/\\.\\-]+$"
          readHeader:
            title: Input has header line (text formats only)
            type: boolean
          writeHeader:
            title: Output has header line (text formats only)
            type: boolean
          separator:
            title: Separator for text formats
            type: string
            default: tab
            enum:
            - tab
            - comma
            - space
            - pipe
          idColumn:
            title: Index (text) or name (SDF) to use for the ID field
            type:
            - integer
            - string
            pattern: "^[A-Za-z0-9_\\.\\- ]+$"
          sdfReadRecords:
            title: Number of SDF records to read field names
            type: integer
            default: 100

  similarity-screen-smiles:
    name: Descriptor based similarity screening (SMILES input)
    description: >-
      Filters molecules by molecular similarity using RDKit.
      A number of descriptors and metrics are available.
      Query molecule(s) are specified as parameters in SMILES format.
    version: '1.0.0'
    category: virtual screening
    keywords:
    - rdkit
    - similarity
    - descriptors
    - screen
    - fingerprint
    - filter
    doc-url: 'https://discourse.squonk.it/t/job-similarity-screen/92'
    image:
      name: informaticsmatters/vs-prep
      tag: 'latest'
      project-directory: /data
      working-directory: /data
    command: >-
      /code/screen.py --input '/data/{{ inputFile }}'
      --smiles {% for smi in smiles %} '{{ smi }}'{% endfor %}
      --output '{{ outputFile }}'
      {% if readHeader is defined %}--read-header{% endif %}
      {% if writeHeader is defined %}--write-header{% endif %}
      --delimiter '{{ separator }}'
      --descriptor '{{ descriptor }}'
      --metric '{{ metric }}'
      {% if threshold is defined %}--threshold '{{ threshold }}'{% endif %}
      {% if simIndex is defined %}--sim-index '{{ simIndex }}'{% endif %}
      {% if alpha is defined %}--alpha {{ alpha }}{% endif %}
      {% if beta is defined %}--beta {{ beta }}{% endif %}
      {% if nbits is defined %}--nbits {{ nbits }}{% endif %}
      --interval 10000
    variables:
      order:
        options:
        - outputFile
        - smiles
        - readHeader
        - writeHeader
        - separator
        - descriptor
        - metric
        - threshold
        - simIndex
        - alpha
        - beta
        - nbits
      inputs:
        type: object
        required:
        - inputFile
        properties:
          inputFile:
            title: Molecules to screen
            mime-types:
            - squonk/x-smiles
            - text/csv
            type: file
      outputs:
        type: object
        properties:
          outputFile:
            title: Output file
            mime-types:
            - squonk/x-smiles
            creates: '{{ outputFile }}'
            type: file
            annotation-properties:
              fields-descriptor:
                origin: squonk2-job
                description: Descriptor based similarity screening
                fields:
                  # Note that the fields that are output are dependent on the number of queries that are specified.
                  # If there is only a single query then only the score_1 field will be present.
                  # If there are 2 queries then there will also be a score_2 field and score_min, score_max, score_amean,
                  #   score_gmean and score_prod fields.
                  # If there are 3 queries then there will also be a score_3 field etc.
                  score_1:
                    type: number
                    description: >-
                      Similarity to query 1
                    required: true
                    active: true
                  score_2:
                    type: number
                    description: >-
                      Similarity to query 2
                    required: true
                    active: true
                  score_3:
                    type: number
                    description: >-
                      Similarity to query 3
                    required: true
                    active: true
                  score_min:
                    type: number
                    description: >-
                      Minimum similarity
                    required: true
                    active: true
                  score_max:
                    type: number
                    description: >-
                      Maximum similarity
                    required: true
                    active: true
                  score_amean:
                    type: number
                    description: >-
                      Arithmetic mean of similarities
                    required: true
                    active: true
                  score_gmean:
                    type: number
                    description: >-
                      Geometric mean of similarities
                    required: true
                    active: true
                  score_prod:
                    type: number
                    description: >-
                      Product of similarities
                    required: true
                    active: true
              service-execution:
                service_ref: 'https://discourse.squonk.it/t/job-similarity-screen/92'
                derived-from: inputFile
      options:
        type: object
        required:
        - smiles
        - outputFile
        - separator
        - descriptor
        - metric
        properties:
          outputFile:
            title: Output file name
            type: string
            pattern: "^[A-Za-z0-9_/\\.\\-]+$"
          smiles:
            title: Query SMILES
            type: array
            items:
              type: string
          readHeader:
            title: Input has header line
            type: boolean
          writeHeader:
            title: Output has header line
            type: boolean
            default: true
          separator:
            title: Separator for input file
            type: string
            default: tab
            enum:
            - tab
            - comma
            - space
            - pipe
          descriptor:
            title: Descriptor or fingerprint type
            type: string
            default: rdkit
            enum:
            - maccs
            - morgan2
            - morgan3
            - rdkit
          metric:
            title: Similarity metric
            type: string
            default: tanimoto
            enum:
            - asymmetric
            - braunblanquet
            - cosine
            - dice
            - kulczynski
            - mcconnaughey
            - rogotgoldberg
            - russel
            - sokal
            - tanimoto
            - tversky
          threshold:
            title: Similarity threshold (0 - 1)
            type: number
            minimum: 0
            maximum: 1
          simIndex:
            title: Similarity score column index
            type: integer
            minimum: 0
          alpha:
            title: Tversky alpha
            type: number
            default: 1
            minimum: 0
            maximum: 1
          beta:
            title: Tversky beta
            type: number
            default: 0
            minimum: 0
            maximum: 1
          nbits:
            title: Number of bits for Morgan bit vector
            type: integer

  similarity-screen-file:
    name: Descriptor based similarity screening (file input)
    description: >-
      Filters molecules by molecular similarity using RDKit.
      A number of descriptors and metrics are available.
      Query molecule(s) are specified as parameters in SMILES format.
    version: '1.0.0'
    category: virtual screening
    keywords:
    - rdkit
    - similarity
    - descriptors
    - screen
    - fingerprint
    - filter
    doc-url: 'https://discourse.squonk.it/t/job-similarity-screen/92'
    image:
      name: informaticsmatters/vs-prep
      tag: 'latest'
      project-directory: /data
      working-directory: /data
    command: >-
      /code/screen.py --input '/data/{{ inputFile }}'
      --queries '/data/{{ queryFile }}'
      --output '/data/{{ outputFileName }}'
      {% if headerInputs is defined %}--read-header{% endif %}
      {% if headerQueries is defined %}--queries-read-header{% endif %}
      {% if headerOutputs is defined %}--write-header{% endif %}
      --delimiter '{{ separatorInputs }}'
      --queries-delimiter '{{ separatorQueries }}'
      --descriptor '{{ descriptor }}'
      --metric '{{ metric }}'
      {% if threshold is defined %}--threshold '{{ threshold }}'{% endif %}
      {% if simIndex is defined %}--sim-index '{{ simIndex }}'{% endif %}
      {% if alpha is defined %}--alpha {{ alpha }}{% endif %}
      {% if beta is defined %}--beta {{ beta }}{% endif %}
      {% if nbits is defined %}--nbits {{ nbits }}{% endif %}
      --interval 10000
    variables:
      order:
        options:
        - headerInputs
        - headerQueries
        - separatorInputs
        - separatorQueries
        - outputFileName
        - headerOutputs
        - descriptor
        - metric
        - threshold
        - simIndex
        - alpha
        - beta
        - nbits
      inputs:
        type: object
        required:
        - inputFile
        - queriesFile
        properties:
          inputFile:
            title: Molecules to screen
            mime-types:
            - squonk/x-smiles
            - text/csv
            type: file
          queryFile:
            title: Query molecules
            mime-types:
            - squonk/x-smiles
            - text/csv
            type: file
      outputs:
        type: object
        properties:
          outputFile:
            title: Output file name
            mime-types:
            - squonk/x-smiles
            creates: '{{ outputFileName }}'
            type: file
            annotation-properties:
              fields-descriptor:
                origin: squonk2-job
                description: Descriptor based similarity screening
                fields:
                  score_min:
                    type: number
                    description: >-
                      Minimum similarity
                    required: true
                    active: true
                  score_max:
                    type: number
                    description: >-
                      Maximum similarity
                    required: true
                    active: true
                  score_amean:
                    type: number
                    description: >-
                      Arithmetic mean of similarities
                    required: true
                    active: true
                  score_gmean:
                    type: number
                    description: >-
                      Geometric mean of similarities
                    required: true
                    active: true
              service-execution:
                service_ref: 'https://discourse.squonk.it/t/job-similarity-screen/92'
                derived-from: inputFile
      options:
        type: object
        required:
        - outputFileName
        - separatorInputs
        - separatorQueries
        - descriptor
        - metric
        properties:
          outputFileName:
            title: Output file name
            type: string
            pattern: "^[A-Za-z0-9_/\\.\\-]+$"
          headerInputs:
            title: Input file has header line
            type: boolean
          headerQueries:
            title: Queries file has header line
            type: boolean
          headerOutputs:
            title: Output file has header line
            type: boolean
            default: true
          separatorInputs:
            title: Separator for input file
            type: string
            default: tab
            enum:
            - tab
            - comma
            - space
            - pipe
          separatorQueries:
            title: Separator for queries file
            type: string
            default: tab
            enum:
            - tab
            - comma
            - space
            - pipe
          descriptor:
            title: Descriptor or fingerprint type
            type: string
            default: rdkit
            enum:
            - maccs
            - morgan2
            - morgan3
            - rdkit
          metric:
            title: Similarity metric
            type: string
            default: tanimoto
            enum:
            - asymmetric
            - braunblanquet
            - cosine
            - dice
            - kulczynski
            - mcconnaughey
            - rogotgoldberg
            - russel
            - sokal
            - tanimoto
            - tversky
          threshold:
            title: Similarity threshold (0 - 1)
            type: number
            minimum: 0
            maximum: 1
          simIndex:
            title: Similarity score column index
            type: integer
            minimum: 0
          alpha:
            title: Tversky alpha
            type: number
            default: 1
            minimum: 0
            maximum: 1
          beta:
            title: Tversky beta
            type: number
            default: 0
            minimum: 0
            maximum: 1
          nbits:
            title: Number of bits for Morgan bit vector
            type: integer

  sdf2json:
    name: Convert SDF to JSON format
    description: >-
      Converts a SD file to Squonk JSON format
    version: '1.0.0'
    category: virtual screening
    keywords:
    - convert
    - format
    image:
      name: informaticsmatters/vs-prep
      tag: 'latest'
      project-directory: /data
      working-directory: /data
    command: >-
      /code/convert_file.py --input-file '/data/{{ inputFile }}'
      --input-format chemical/x-mdl-sdfile
      --output-file {{ outputFile }}
      --output-format squonk/x-dataset-molecule-v2+json
      --interval 10000
    variables:
      inputs:
        type: object
        required:
        - inputFile
        properties:
          inputFile:
            title: Molecules
            mime-types:
            - chemical/x-mdl-sdfile
            type: file
      outputs:
        type: object
        properties:
          outputFile:
            title: Output file
            mime-types:
            - squonk/x-dataset-molecule-v2+json
            creates: '{{ outputFile }}'
            type: file
            annotation-properties:
              service-execution:
                service_ref: 'https://discourse.squonk.it/t/job-rdk-props/91'
              derived-from: inputFile
      options:
        type: object
        required:
        - outputFile
        properties:
          outputFile:
            title: Output file name
            type: string
            pattern: "^[A-Za-z0-9_/\\.\\-]+\\.json$"

  fragment-network-expand:
    name: Fragment network expansion
    description: >-
      Expand a set of molecules using the fragment network
    version: '1.0.0'
    category: virtual screening
    keywords:
    - fragment-network
    - candidate-selection
    image:
      name: informaticsmatters/vs-prep
      tag: 'latest'
      project-directory: /data
      working-directory: /data
    command: >-
      /code/expander.py
      --input '{{ inputFile }}'
      {% if outputDir is defined %}--outdir '{{ outputDir }}'{% endif %}
      --hac-min {{ hacMin }}
      --hac-max {{ hacMax }}
      --rac-min {{ racMin }}
      --rac-max {{ racMax }}
      --hops {{ hops }}
      {% if indexAsFilename %}--index-as-filename{% endif %}
      {% if excludeInputs %}--exclude-inputs{% endif %}
      {% if excludeFiles is defined %}--excludes {{ excludeFiles }}{% endif %}
    variables:
      order:
        inputs:
        - inputFile
        - excludes
        options:
        - outputDir
        - hacMin
        - hacMax
        - racMin
        - racMax
        - hops
        - indexAsFilename
        - excludeInputs
      inputs:
        type: object
        required:
        - inputFile
        properties:
          inputFile:
            title: SDF file with molecules to expand
            mime-types:
            - chemical/x-mdl-sdfile
            type: file
          excludes:
            title: Exclude molecules from these files in the outputs (optional)
            mime-types:
            - chemical/x-mdl-sdfile
            type: file
            multiple: true
      outputs:
        type: object
        properties:
          jsonOutputs:
            title: Query results from fragment network
            mime-types:
            - application/json
            creates: '{{ outputDir }}/*.json'
            type: files
          smilesOutputs:
            title: Expanded molecules as SMILES
            mime-types:
            - squonk/x-smiles
            creates: '{{ outputDir }}/*.smi'
            type: files
      options:
        type: object
        required:
        - hacMin
        - hacMax
        - racMin
        - racMax
        - hops
        - indexAsFilename
        - excludeInputs
        properties:
          outputDir:
            title: Directory for output files
            type: string
          hacMin:
            title: Heavy atom count decrease
            type: integer
            default: 3
          hacMax:
            title: Heavy atom count increase
            type: integer
            default: 3
          racMin:
            title: Ring atom count decrease
            type: integer
            default: 1
          racMax:
            title: Ring atom count increase
            type: integer
            default: 1
          hops:
            title: Number of fragment network hops
            type: integer
            default: 1
          indexAsFilename:
            title: Use the molecule index as the file name
            type: boolean
            default: false
          excludeInputs:
            title: Exclude inputs in the .smi output
            type: boolean
            default: true

  ####################
  # nextflow jobs
  ####################
  enumerate-candidates:
    name: Enumerate microstates, tautomers and undefined chiral centres
    description: >-
      Enumerate microstates, tautomers and undefined chiral centres. Inputs are defined
      by the prep-enum-conf-lists job.
    version: '1.0.0'
    category: virtual screening
    keywords:
    - rdkit
    - ligand preparation
    - enumeration
    - dimorphite_dl
    - nextflow
    doc-url: https://discourse.squonk.it/t/job-enumerate-candidates/71
    image:
      name: informaticsmatters/vs-nextflow
      tag: 'latest'
      project-directory: /data
      working-directory: /data
      type: nextflow
    command: >-
      nextflow run /code/enumerate.nf
      --inputs '/data/{{ inputFile }}'
      --data_dir '/data/{{ dataDir }}'
      -with-trace
      -with-report
    variables:
      inputs:
        type: object
        required:
        - inputFile
        - dataDir
        properties:
          inputFile:
            title: Molecules to enumerate
            mime-types:
            - chemical/x-csv
            type: file
          dataDir:
            title: Directory with sharded data
            type: directory
            default: molecules/sha256
      outputs:
        type: object
        properties:
          enumerated:
            title: Enumerated molecules
            mime-types:
            - chemical/x-csv
            creates: '{{ dataDir }}/sha256/*/*/*.smi'
            # additional *.smi files might have already been generated
            type: filesenumeration
          trace_file:
            title: Nextflow trace file
            creates: trace.txt
            mime-types:
            - text/plain
            type: file
          report_file:
            title: Nextflow report file
            creates: report.html
            mime-types:
            - text/html
            type: file
      # there are no options for this job

  generate-low-energy-conformers:
    name: Generate 3D conformers (sharded)
    description: >-
      Generate a low energy 3D conformers of molecules. Inputs are defined
      by the prep-enum-conf-lists job and outputs are written to the sharded file system.
    version: '1.0.0'
    category: virtual screening
    keywords:
    - rdkit
    - ligand preparation
    - conformer
    - nextflow
    doc-url: https://discourse.squonk.it/t/job-generate-low-energy-conformers/86
    image:
      name: informaticsmatters/vs-nextflow
      tag: 'latest'
      project-directory: /data
      working-directory: /data
      type: nextflow
    command: >-
      nextflow run /code/le_conformers.nf
      --inputs '/data/{{ inputFile }}'
      --data_dir '/data/{{ dataDir }}'
      -with-trace
      -with-report
    variables:
      inputs:
        type: object
        required:
        - inputFile
        - dataDir
        properties:
          inputFile:
            title: Molecules to process
            mime-types:
            - chemical/x-csv
            type: file
          dataDir:
            title: Directory with sharded data
            type: directory
            default: molecules/sha256
      outputs:
        type: object
        properties:
          enumerated:
            title: 3D conformers
            mime-types:
            - chemical/x-mdl-sdfile
            creates: '{{ dataDir }}/sha256/*/*/*_le_confs.sdf'
            # additional *.sdf files might have already been generated
            type: files
          trace_file:
            title: Nextflow trace tile
            creates: trace.txt
            mime-types:
            - text/plain
            type: file
          report_file:
            title: Nextflow report file
            creates: report.html
            mime-types:
            - text/html
            type: file
      # there are no options for this job

  run-rdock:
    name: Run rRock docking
    description: >-
      Run rDock docking.
    version: '1.0.0'
    category: virtual screening
    keywords:
    - rdock
    - docking
    - nextflow
    doc-url: https://discourse.squonk.it/t/job-run-rdock/74
    image:
      name: informaticsmatters/vs-nextflow
      tag: 'latest'
      project-directory: /data
      working-directory: /data
      type: nextflow
    command: >-
      nextflow
      -log {{ DM_INSTANCE_DIRECTORY }}/.nextflow.log
      run -c /code/nextflow.config
      /code/rdock-docking.nf
      --ligands '/data/{{ ligandsSDF }}'
      --protein '/data/{{ proteinMOL2 }}'
      --prmfile '/data/{{ prmFile }}'
      --asfile '/data/{{ asFile }}'
      --num_dockings {{ numDockings }}
      --output_basename {{ outputFile }}
      {% if resultsDir is defined %}--publish_dir {{ resultsDir }}{% endif %}
      -with-trace {{ DM_INSTANCE_DIRECTORY }}/trace.txt
      -with-report {{ DM_INSTANCE_DIRECTORY }}/report.html
    variables:
      order:
        options:
        - resultsDir
        - outputFile
        - ligandsSDF
        - proteinMOL2
        - prmFile
        - asFile
        - numDockings
      inputs:
        type: object
        required:
        - ligandsSDF
        - proteinMOL2
        - prmFile
        - asFile
        properties:
          ligandsSDF:
            title: Candidate ligands to process (SDF format)
            mime-types:
            - chemical/x-mdl-sdfile
            type: file
          proteinMOL2:
            title: Prepared receptor (MOL2 format)
            mime-types:
            - chemical/x-mol2
            type: file
          prmFile:
            title: rDock configuration (.prm file)
            mime-types:
            - squonk/x-rdock-prm
            type: file
          asFile:
            title: Cavity definition (.as file)
            mime-types:
            - squonk/x-rdock-as
            type: file
      outputs:
        type: object
        properties:
          dockedSDF:
            title: Docked poses
            mime-types:
            - chemical/x-mdl-sdfile
            creates: '{% if resultsDir is defined %}{{ resultsDir }}/{% endif %}{{ outputFile }}.sdf'
            type: file
          log_file:
            title: Nextflow log file
            creates: '{{ DM_INSTANCE_DIRECTORY }}/.nextflow.log'
            mime-types:
            - text/plain
            type: file
          trace_file:
            title: Nextflow trace file
            creates: '{{ DM_INSTANCE_DIRECTORY }}/trace.txt'
            mime-types:
            - text/plain
            type: file
          report_file:
            title: Nextflow report file
            creates: '{{ DM_INSTANCE_DIRECTORY }}/report.html'
            mime-types:
            - text/html
            type: file
          nextflow_reports:
            title: Nextflow reports and logs
            creates: '{{ DM_INSTANCE_DIRECTORY }}'
            type: directory
      options:
        type: object
        required:
        - numDockings
        - outputFile
        properties:
          outputFile:
            title: Base filename for results (no extension)
            type: string
            default: results_rdock
            pattern: "^[A-Za-z0-9_\\.\\-]+$"
          resultsDir:
            title: Dir for results
            type: string
            pattern: "^[A-Za-z0-9_/\\.\\-]*[A-Za-z0-9_\\.\\-]+$"
          numDockings:
            title: Number of dockings
            type: integer
            default: 50

  run-smina:
    name: Run smina docking
    description: >-
      Run smina docking.
    version: '1.0.0'
    category: virtual screening
    keywords:
    - smina
    - docking
    - nextflow
    doc-url: https://discourse.squonk.it/t/job-run-smina/78
    image:
      name: informaticsmatters/vs-nextflow
      tag: 'latest'
      project-directory: /data
      working-directory: /data
      type: nextflow
    command: >-
      nextflow
      {% if resultsDir is defined %}-log {{ resultsDir }}/.nextflow.log{% endif %}
      run -c /code/nextflow.config
      /code/smina-docking.nf
      --ligands '/data/{{ ligands }}'
      --protein '/data/{{ protein }}'
      --ligand '/data/{{ ligand }}'
      --padding {{ boxPadding }}
      --exhaustiveness {{ exhaustiveness }}
      --scoring_function '{{ scoringFunction }}'
      {% if resultsDir is defined %}--publish_dir '{{ resultsDir }}'{% endif %}
      --output_basename '{{ outputFile }}'
      -with-trace {% if resultsDir is defined %}{{ resultsDir }}/trace.txt{% endif %}
      -with-report {% if resultsDir is defined %}{{ resultsDir }}/report.html{% endif %}
    variables:
      order:
        options:
        - resultsDir
        - outputFile
        - boxPadding
        - exhaustiveness
        - scoringFunction
      inputs:
        type: object
        required:
        - ligands
        - ligand
        - protein
        properties:
          ligands:
            title: Candidate ligands to process (SDF format)
            mime-types:
            - chemical/x-mdl-sdfile
            type: file
          protein:
            title: Prepared receptor (PDBQT, PDB or MOL2 format)
            mime-types:
            - chemical/x-mol2
            - chemical/x-pdb
            - chemical/x-pdbqt
            type: file
          ligand:
            title: Ligand file for box (PDBQT, PDB, MOL or MOL2 format)
            mime-types:
            - chemical/x-mdl-molfile
            - chemical/x-mol2
            - chemical/x-pdb
            - chemical/x-pdbqt
            type: file
      outputs:
        type: object
        properties:
          dockedSDF:
            title: Docked poses
            mime-types:
            - chemical/x-mdl-sdfile
            creates: '{% if resultsDir is defined %}{{ resultsDir }}/{% endif %}{{ outputFile }}.sdf'
            type: file
            annotation-properties:
              fields-descriptor:
                origin: squonk2-job
                description: Run smina docking
                fields:
                  minimizedAffinity:
                    type: number
                    description: >-
                      Binding affinity predicted by smina docking
                    required: true
                    active: true
              service-execution:
                service_ref: 'https://discourse.squonk.it/t/job-run-smina/78'
              derived-from: ligands
          log_file:
            title: Nextflow log file
            creates: '{% if resultsDir is defined %}{{ resultsDir }}/{% endif %}.nextflow.log'
            mime-types:
            - text/plain
            type: file
          trace_file:
            title: Nextflow trace file
            creates: '{% if resultsDir is defined %}{{ resultsDir }}/{% endif %}trace.txt'
            mime-types:
            - text/plain
            type: file
          report_file:
            title: Nextflow report file
            creates: '{% if resultsDir is defined %}{{ resultsDir }}/{% endif %}report.html'
            mime-types:
            - text/html
            type: file
      options:
        type: object
        required:
        - boxPadding
        - exhaustiveness
        - scoringFunction
        - outputFile
        properties:
          resultsDir:
            title: Directory for results
            type: string
            pattern: "^[A-Za-z0-9_/\\.\\-]*[A-Za-z0-9_\\.\\-]+$"
          outputFile:
            title: Base filename for results (no extension)
            type: string
            default: results_smina
            pattern: "^[A-Za-z0-9_\\.\\-]+$"
          boxPadding:
            title: Box definition padding
            type: number
            default: 4.0
          exhaustiveness:
            title: Exhaustiveness setting
            type: integer
            default: 8
          scoringFunction:
            title: Scoring function to use
            type: string
            enum:
            - ad4_scoring
            - dkoes_fast
            - dkoes_scoring
            - dkoes_scoring_old
            - vina
            - vinardo

  oddt-score-interactions:
    name: ODDT rescoring and interactions
    description: >-
      Generate rescoring functions and interactions using ODDT.
    version: '1.0.0'
    category: virtual screening
    keywords:
    - oddt
    - docking
    - nextflow
    doc-url: https://discourse.squonk.it/t/job-oddt-score-interactions/79
    image:
      name: informaticsmatters/vs-nextflow
      tag: 'latest'
      project-directory: /data
      working-directory: /data
      type: nextflow
    command: >-
      nextflow run /code/oddt.nf
      --ligands '/data/{{ ligandsSDF }}'
      --protein '/data/{{ proteinPDB }}'
      -with-trace
      -with-report
    variables:
      inputs:
        type: object
        required:
        - ligandsSDF
        - proteinPDB
        properties:
          ligandsSDF:
            title: Candidate ligands to process (SDF format)
            mime-types:
            - chemical/x-mdl-sdfile
            type: file
          proteinPDB:
            title: Prepared receptor (PDB format)
            mime-types:
            - chemical/x-pdb
            type: file
      outputs:
        type: object
        properties:
          scoredSDF:
            title: Scored poses
            mime-types:
            - chemical/x-mdl-sdfile
            creates: 'results_oddt.sdf'
            type: file
          trace_file:
            title: Nextflow trace file
            creates: trace.txt
            mime-types:
            - text/plain
            type: file
          report_file:
            title: Nextflow report file
            creates: report.html
            mime-types:
            - text/html
            type: file
      # there are no options for this job
