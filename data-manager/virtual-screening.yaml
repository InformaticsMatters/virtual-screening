---
# A Data-Manager Job definition, defining 1 or more Data Manager Jobs.
# For v1 the 'kind-version' must be '2021.1'
kind: DataManagerJobDefinition
kind-version: '2021.1'

# An arbitrary name (ignored by the DataManager)
name: Virtual screening tools using RDKit, OpenBabel and other open source tools

# The 'collection' for the jobs named in this definition.
#
# A collection ensures that all of the Jobs have unique names so that they
# can be easily identified. A collection can be used by more than one
# JobDefinition file but all the Job identities in a given collection must
# be unique. i.e. our "shard-molecules" Job ID is unique because
# it's in the collection "im-rdkit-virtual-screening" and there is no
# other "shard-molecules" in the same collection. It is different
# to any "shard-molecules" Job identity in any other collection.
# The collection must only container lower-case letters, numbers and a hyphen
# and must begin with a letter.
collection: im-virtual-screening

# The repository where this definition (and the code for the Job) can be found.
repository-url: https://github.com/InformaticsMatters/virtual-screening/virtual-screening.yaml
# The repository tag.
# All definitions are expected to reside in a repository that has been tagged.
repository-tag: '1.0.3'

# Job definitions.
# A list of jobs indexed using a unique identity (i.e. "shared-molecules").
# Job identities must only container lower-case letters, numbers or a hyphen
# and must begin with a letter.
jobs:

  # simple (non-nextflow) jobs ------------------------------------------------
  # Where image->type is 'simple' (the default)

  shard:
    # An arbitrary name.
    # The job is actually referred to in the API using the job (above),
    # e.g. 'shard-molecules'. The name is simply here as a human-friendly
    # reference.
    name: Shard candidate molecules
    # Human readable description
    description: >-
      Standardize input molecules and generate shards based on heavy atom count and
      calculate a range of molecular properties used for filtering.
      Basic properties of the molecules, including the vendor code are
      stored in a data structure that can be shared between multiple datasets.
    # The job version.
    # Any string, but typically something compatible with SemVer 2.0.0
    version: '1.0.0'
    # An arbitrary category and keywords.3
    # Provided to facilitate Job filtering in the client.
    category: virtual screening
    keywords:
    - rdkit
    - ligand preparation
    # link to documentation for the job
    doc-url: https://discourse.squonk.it/t/job-shard/67
    # The container image that contains the Job implementation
    # (in v1, these are hosted on Docker Hub)
    # ... along with the image tag
    # and the project directory (mount-point) to use for the Project data.
    # You can also add a type enumeration ('simple' or 'nextflow'),
    # although this field is optional.
    image:
      name: informaticsmatters/vs-prep
      tag: 'latest'
      project-directory: /data
      working-directory: /data
      type: simple
    # The command that will be used as the Kubernetes Pod 'command'
    # (after variable expansion). This is a jinja2 template with its variables
    # described in the `variables` block below (A JSONSchema block).
    command: >-
      /code/shard.py -i{% for file in inputFiles %} '{{ file }}'{% endfor %}
      -s '{{ supplierName }}'
      -v '{{ supplierVersion }}' -o '{{ outputDir }}' -n {{ codeFieldIndex }}
      --skip-lines {{ skipLines }}
      --errors-file '{{ supplierName }}_{{ supplierVersion }}_errors.smi'
      --interval 10000
    # Command variables - using JSONSchema to allow for simplified client
    # presentation to the user. 'inputs' and 'outputs' use custom types
    # and typically consist of the definition of input files and output
    # directories and files. 'options' are generic JSONSchema types,
    # like 'strings', 'integers' etc.
    # Every 'variable' expected by the command must be represented by a
    # corresponding property in 'inputs', 'outputs' or 'options'.
    variables:
      order:
        options:
        - supplierName
        - supplierVersion
        - codeFieldIndex
        - skipLines
        - outputDir
      inputs:
        type: object
        required:
        - inputFiles
        properties:
          inputFiles:
            title: Molecules to shard
            mime-types:
            - squonk/x-smiles
            - chemical/x-csv
            multiple: true
            type: file
      outputs:
        type: object
        properties:
          hacSlices:
            title: HAC slices
            mime-types:
            - chemical/x-csv
            creates: '{{ outputDir }}/{{ supplierName }}_{{ supplierVersion }}/*.smi'
            type: files
          shards:
            title: Sharded molecule data
            mime-types:
            - appliction/json
            creates: '{{ outputDir }}/sha256/*/*/*.json'
            type: files
      options:
        type: object
        required:
        - supplierName
        - supplierVersion
        - codeFieldIndex
        - outputDir
        - skipLines
        properties:
          codeFieldIndex:
            title: Index of vendor code field (zero based)
            default: 1
            minimum: 1
            type: integer
          outputDir:
            title: Output directory
            type: string
            default: molecules
          supplierName:
            title: Source of the molecules
            type: string
            format: simple
          supplierVersion:
            title: Version of the molecule source
            type: string
          skipLines:
            title: Skip this many lines (e.g. 1 for a file with a header line)
            type: integer
            default: 0
            minimum: 0

  filter:
    name: Filter candidate molecules
    description: >-
      Filter molecules based on molecular properties. The inputs are those generated using the
      shard job.
    version: '1.0.0'
    category: virtual screening
    keywords:
    - rdkit
    - ligand preparation
    - filter
    doc-url: https://discourse.squonk.it/t/job-filter/68
    image:
      name: informaticsmatters/vs-prep
      tag: 'latest'
      project-directory: /data
      working-directory: /data
    command: >-
      /code/filter.py -i{% for dir in inputDir %} '{{ dir }}'{% endfor %}
      -o '{{ outputFile }}'
      --min-hac {{ minHac }}
      --max-hac {{ maxHac }}
      {% if minRotb is defined %}--min-rotb {{ minRotb }}{% endif %}
      {% if maxRotb is defined %}--max-rotb {{ maxRotb }}{% endif %}
      {% if minRings is defined %}--min-rings {{ minRings }}{% endif %}
      {% if maxRings is defined %}--max-rings {{ maxRings }}{% endif %}
      {% if minAroRings is defined %}--min-aro-rings {{ minAroRings }}{% endif %}
      {% if maxAroRings is defined %}--max-aro-rings {{ maxAroRings }}{% endif %}
      {% if minChiralCenters is defined %}--min-chiral-centres {{ minChiralCenters }}{% endif %}
      {% if maxChiralCenters is defined %}--max-chiral-centres {{ maxChiralCenters }}{% endif %}
      {% if minUndefinedChiralCenters is defined %}--min-undefined-chiral-centres {{ minUndefinedChiralCenters }}{% endif %}
      {% if maxUndefinedChiralCenters is defined %}--max-undefined-chiral-centres {{ maxUndefinedChiralCenters }}{% endif %}
      {% if minSp3 is defined %}--min-sp3 {{ minSp3 }}{% endif %}
      {% if maxSp3 is defined %}--max-sp3 {{ maxSp3 }}{% endif %}
    variables:
      order:
        options:
        - outputFile
        - minHac
        - maxHac
        - minRotb
        - maxRotb
        - minRings
        - maxRings
        - minAroRings
        - maxAroRings
        - minChiralCentres
        - maxChiralCentres
        - minUndefinedChiralCentres
        - maxUndefinedChiralCentres
        - minSp3
        - maxSp3
      inputs:
        type: object
        required:
        - inputDir
        properties:
          inputDir:
            title: Directories with molecules to filter
            type: directory
            multiple: true
      outputs:
        type: object
        properties:
          outputFile:
            title: Filtered output
            mime-types:
            - squonk/x-smiles
            creates: '{{ outputFile }}'
            type: file
      options:
        type: object
        required:
        - minHac
        - maxHac
        - outputFile
        properties:
          outputFile:
            title: Output file name
            type: string
            default: filtered.smi
          minHac:
            title: Minimum Heavy Atom Count
            type: integer
            minimum: 0
          maxHac:
            title: Maximum Heavy Atom Count
            type: integer
            minimum: 0
          minRotb:
            title: Minimum number of rotatable bonds
            type: integer
            minimum: 0
          maxRotb:
            title: Maximum number of rotatable bonds
            type: integer
            minimum: 0
          minRings:
            title: Minimum number of rings
            type: integer
            minimum: 0
          maxRings:
            title: Maximum number of rings
            type: integer
            minimum: 0
          minAroRings:
            title: Minimum number of aromatic rings
            type: integer
            minim: 0
          maxAroRings:
            title: Maximum number of aromatic rings
            type: integer
            minim: 0
          minChiralCentres:
            title: Minimum number of chiral centres
            type: integer
            minimum: 0
          maxChiralCentres:
            title: Maximum number of chiral centres
            type: integer
            minimum: 0
          minUndefinedChiralCentres:
            title: Minimum number of undefined chiral centres
            type: integer
            minimum: 0
          maxUndefinedChiralCentres:
            title: Maximum number of undefined chiral centres
            type: integer
            minimum: 0
          minSp3:
            title: Minimum sp3
            type: integer
            minimum: 0
          maxSp3:
            title: Maximum sp3
            type: integer
            minimum: 0

  prep-enum-conf-lists:
    name: Prepare enumeration and conformer lists
    description: >-
      Prepare lists of molecules that need enumeration of microstates, tautomers and undefined
      chiral centres, and those that need 3D conformer generation.
    version: '1.0.0'
    category: virtual screening
    keywords:
    - rdkit
    - ligand preparation
    - enumeration
    - conformer
    - 3d
    doc-url: https://discourse.squonk.it/t/job-prep-enum-conf-lists/70
    image:
      name: informaticsmatters/vs-prep
      tag: 'latest'
      project-directory: /data
      working-directory: /data
    command: >-
      /code/prepare_enum_conf_lists.py
      --input '{{ inputFile }}'
      --data-dir '{{ dataDir }}'
      --outfile-enum '{{ outputFileEnum }}'
      --outfile-conf '{{ outputFileConf }}'
      --interval 10000
    variables:
      inputs:
        type: object
        required:
        - inputFile
        - dataDir
        properties:
          inputFile:
            title: Molecules to evaluate
            mime-types:
            - chemical/x-csv
            type: file
          dataDir:
            title: Directory with sharded data
            type: directory
            default: molecules/sha256
      outputs:
        type: object
        properties:
          outputFileEnum:
            title: Molecules needing enumeration
            mime-types:
            - squonk/x-smiles
            creates: '{{ outputFileEnum }}'
            type: file
          outputFileConf:
            title: Molecules needing conformer generation
            mime-types:
            - squonk/x-smiles
            creates: '{{ outputFileConf }}'
            type: file
      options:
        type: object
        required:
        - outputFileEnum
        - outputFileConf
        properties:
          outputFileEnum:
            title: Filename for molecules needing enumeration
            type: string
            default: need-enum.smi
          outputFileConf:
            title: Filename for molecules needing 3D conformers
            type: string
            default: need-confs.smi

  assemble-conformers:
    name: Assemble conformers
    description: >-
      Assemble 3D conformers into a single SDF for suitable as input to docking.
    version: '1.0.0'
    category: virtual screening
    keywords:
    - ligand preparation
    - 3d
    doc-url: https://discourse.squonk.it/t/job-assemble-conformers/73
    image:
      name: informaticsmatters/vs-prep
      tag: 'latest'
      project-directory: /data
      working-directory: /data
    command: >-
      /code/assemble_conformers.py
      --input '{{ inputFile }}'
      --data-dir '{{ dataDir }}'
      --mode {{ mode }}
      --output '{{ outputFile }}'
      {% if excludeBase is defined %}-exclude-base{% endif %}
      {% if excludeTautomers is defined %}-exclude-tautomers{% endif %}
      {% if excludeMicrostates is defined %}-exclude-microstates{% endif %}
      --interval 1000
    variables:
      order:
        inputs:
        - inputFile
        - dataDir
        options:
        - outputFile
        - mode
        - excludeBase
        - excludeTautomers
        - excludeMicrostates
      inputs:
        type: object
        required:
        - inputFile
        - dataDir
        properties:
          inputFile:
            title: Molecules to assemble
            mime-types:
            - squonk/x-smiles
            type: file
          dataDir:
            title: Directory with sharded data
            type: directory
            default: molecules/sha256
      outputs:
        type: object
        properties:
          outputFile:
            title: Assembled conformers
            mime-types:
            - chemical/x-mdl-sdfile
            creates: '{{ outputFile }}'
            type: file
            annotation-properties:
              fields-descriptor:
                origin: squonk2-job
                description: Assemble conformers
                fields:
                  Energy:
                    type: number
                    description: >-
                      MMFF94 minimised energy
                    required: true
                    active: true
                  Energy_Delta:
                    type: number
                    description: >-
                      Energy difference to lowest energy conformer
                    required: true
                    active: true
                  std_smi:
                    type: string
                    description: >-
                      SMILES of the parent (un-enumerated) molecule
                    required: true
                    active: true
                  enum_smi:
                    type: string
                    description: >-
                      SMILES of the molecule
                    required: true
                    active: true
                  enum_code:
                    type: string
                    description: >-
                      Type of enumerated form. B=base molecule, T=tautomer, M=microstate
                    required: true
                    active: true
              service-execution:
                service_ref: 'https://discourse.squonk.it/t/job-assemble-conformers/73'
      options:
        type: object
        required:
        - outputFile
        properties:
          outputFile:
            title: Filename for SDF output
            type: string
            default: candidates.sdf
          mode:
            title: Conformer mode
            type: string
            enum:
            - single
            - low-energy
          excludeBase:
            title: Exclude base molecules
            type: boolean
          excludeTautomers:
            title: Exclude enumerated tautomers
            type: boolean
          excludeMicrostates:
            title: Exclude enumerated microstates
            type: boolean

  obabel-convert:
    name: Convert molecule format
    description: >-
      Convert molecular formats using OpenBabel. Can be used to prepare a protein for docking.
      See the docs for more info of all the options.
    version: '1.0.0'
    category: virtual screening
    keywords:
    - protein preparation
    - openbabel
    doc-url: https://discourse.squonk.it/t/job-obabel-convert/77
    image:
      name: informaticsmatters/vs-prep
      tag: 'latest'
      project-directory: /data
      working-directory: /data
    command: >-
      obabel
      '{{ inputFile }}'
      {{ options }}
      {% if options is defined %}{{ options }}{% endif %}
      -O '{{ outputFile }}'
    variables:
      inputs:
        type: object
        required:
        - inputFile
        properties:
          inputFile:
            title: Input file (e.g. pdb, pdbqt, mol or mol2 extension)
            mime-types:
            - chemical/x-pdb
            - chemical/x-pdbqt
            - chemical/x-mol2
            - chemical/x-mol
            type: file
      outputs:
        type: object
        properties:
          outputFile:
            title: Converted molecule
            mime-types:
            - chemical/x-pdb
            - chemical/x-pdbqt
            - chemical/x-mol2
            - chemical/x-mol
            creates: '{{ outputFile }}'
            type: file
      options:
        type: object
        required:
        - outputFile
        properties:
          outputFile:
            title: Filename for output (e.g. pdb, pdbqt, mol or mol2 extension)
            type: string
          options:
            title: Additional options. e.g. -p 7.0
            type: string

  pdb2pqr:
    name: Prepare protein using pdb2pqr
    description: >-
      Prepare a protein for docking by using pdb2pqr. This can replace missing heavy atoms
      and protonate the protein at a specific pH taking into account the local environment
      of titratable groups, such as the hydrogen bonding network.
    version: '1.0.0'
    category: virtual screening
    keywords:
    - protein preparation
    - pdb2pqr
    - protonation
    - 3d
    doc-url: https://discourse.squonk.it/t/job-pdb2pqr/76
    image:
      name: informaticsmatters/vs-prep
      tag: 'latest'
      project-directory: /data
      working-directory: /data
    command: >-
      pdb2pqr30 --with-ph {{ ph }}
      --titration-state-method propka
      --pdb-output '{{ outfileBasename }}.pdb'
      '{{ inputFile }}'
      '{{ outfileBasename }}.pqr'
    variables:
      inputs:
        type: object
        required:
        - inputFile
        properties:
          inputFile:
            title: Input PDB file
            mime-types:
            - chemical/x-pdb
            type: file
      outputs:
        type: object
        properties:
          pdbFile:
            title: PDB file
            mime-types:
            - chemical/x-pdb
            creates: '{{ outfileBasename }}.pdb'
            type: file
          pqrFile:
            title: PQR file
            mime-types:
            - chemical/x-pqr
            creates: '{{ outfileBasename }}.pqr'
            type: file
          logFile:
            title: Log file
            mime-types:
            - text/plain
            creates: '{{ outfileBasename }}.log'
            type: file
      options:
        type: object
        required:
        - outfileBasename
        - ph
        properties:
          ph:
            title: pH to protonate at
            type: number
            default: 7
          outfileBasename:
            title: Base filename for output (do not include the extension)
            type: string
            pattern: "^[A-Za-z0-9_/\\.\\-]+$"
    tests:
      simple-execution:
        inputs:
          inputFile: data/dhfr-receptor.pdb
        options:
          outfileBasename: pdb2pqr-results
          ph: 7
        checks:
          exitCode: 0
          outputs:
          - name: pdb2pqr-results.pqr
            checks:
            - exists: true
          - name: pdb2pqr-results.pdb
            checks:
            - exists: true
          - name: pdb2pqr-results.log
            checks:
            - exists: true

  prepare-rdock:
    name: rDock prepare
    description: >-
      Prepare rDock configuration file (.prm file) and the cavity definition (.as file).
    version: '1.0.0'
    category: virtual screening
    keywords:
    - protein preparation
    - rdock
    - 3d
    doc-url: https://discourse.squonk.it/t/job-prepare-rdock/75
    image:
      name: informaticsmatters/vs-rdock
      tag: 'latest'
      project-directory: /data
      working-directory: /data
    command: >-
      /code/prepare_rdock.py
      --receptor '{{ receptorFile }}'
      --ligand '{{ ligandFile }}'
      --output '{{ outputBaseName }}'
    variables:
      inputs:
        type: object
        required:
        - receptorFile
        - ligandFile
        properties:
          receptorFile:
            title: MOL2 file for receptor
            mime-types:
            - chemical/x-mol2
            type: file
          ligandFile:
            title: Molfile file for ligand
            mime-types:
            - chemical/x-mdl-molfile
            type: file
      outputs:
        type: object
        properties:
          prmFile:
            title: Docking configuration file
            mime-types:
            - squonk/x-rdock-prm
            creates: '{{ outputBaseName }}.prm'
            type: file
          asFile:
            title: Cavity definition file
            mime-types:
            - squonk/x-rdock-as
            creates: '{{ outputBaseName }}.as'
            type: file
      options:
        type: object
        required:
        - outputBaseName
        properties:
          outputBaseName:
            title: Base name for output files
            type: string
            default: docking

  ultrafast-shape-recognition:
    name: USR shape similarity
    description: >-
      Filters molecules using 3D shape similarity and the USR, Electroshape or USRCAT algorithms
    version: '1.0.0'
    category: virtual screening
    keywords:
    - oddt
    - similarity
    - shape
    - usr
    - electroshape
    - usrcat
    - filter
    - 3d
    doc-url: https://discourse.squonk.it/t/job-ultrafast-shape-recognition/87
    image:
      name: informaticsmatters/vs-oddt
      tag: 'latest'
      project-directory: /data
      working-directory: /data
    command: >-
      /code/usr.py --inputs '{{ inputFile }}'
      --query '{{ queryFile }}'
      --outfile '{{ outputFile }}'
      --method {{ method }}
      --threshold {{ threshold }}
      {% if groupBy is defined %}--group-by-field {{ groupBy }}{% endif %}
      --interval 1000
    variables:
      order:
        inputs:
        - queryFile
        - inputFile
        options:
        - method
        - threshold
        - groupBy
        - outputFile
      inputs:
        type: object
        required:
        - queryFile
        - inputFile
        properties:
          inputFile:
            title: Molecules to screen
            mime-types:
            - chemical/x-mdl-sdfile
            type: file
          queryFile:
            title: Query molecule
            mime-types:
            - chemical/x-mdl-molfile
            - chemical/x-mdl-sdfile
            type: file
      outputs:
        type: object
        properties:
          outputFile:
            title: Output file
            mime-types:
            - chemical/x-mdl-sdfile
            creates: '{{ outputFile }}'
            type: file
            annotation-properties:
              fields-descriptor:
                origin: squonk2-job
                description: Molecular shape similarity
                fields:
                  similarity:
                    expression: '{{ method }}_similarity'
                    type: number
                    description: >-
                      Shape similarity
                    required: true
                    active: true
              service-execution:
                service_ref: 'https://discourse.squonk.it/t/job-ultrafast-shape-recognition/87'
              derived-from: inputFile
      options:
        type: object
        required:
        - method
        - threshold
        - outputFile
        properties:
          method:
            title: USR method
            type: string
            enum:
            - usr
            - electroshape
            - usrcat
          outputFile:
            title: Output file name
            type: string
            default: usr-similarity.sdf
          threshold:
            title: Similarity threshold
            type: number
            minimum: 0
            maximum: 1
          groupBy:
            title: Group by field
            type: string
            default: std_smi

  filter-sdf:
    name: Filter the contents of a SDF
    description: >-
      Filters molecules in a SD file.
    version: '1.0.0'
    category: virtual screening
    keywords:
    - rdock
    - sdfilter
    - sdsort
    - filter
    doc-url: 'https://discourse.squonk.it/t/job-filter-sdf/105'
    image:
      name: informaticsmatters/vs-rdock
      tag: 'latest'
      project-directory: /data
      working-directory: /data
    command: >-
      /code/rdock_filter_sdf.sh '{{ inputFile }}' '{{ outputFile }}'
        {{ sortField }}
        {% if sortDescending %}true{% else %}false{% endif %}
        {% if groupByField is defined %}{{ groupByField }}{% endif %}
    variables:
      order:
        options:
        - outputFile
        - sortField
        - groupByField
        - sortDescending
      inputs:
        type: object
        required:
        - inputFile
        properties:
          inputFile:
            title: Molecules to filter
            mime-types:
            - chemical/x-mdl-sdfile
            type: file
      outputs:
        type: object
        properties:
          outputFile:
            title: Output file
            mime-types:
            - chemical/x-mdl-sdfile
            creates: '{{ outputFile }}'
            type: file
      options:
        type: object
        required:
        - outputFile
        - sortField
        - sortDescending
        properties:
          outputFile:
            title: Output file name
            type: string
            pattern: "^[A-Za-z0-9_/\\.\\-]+\\.sdf$"
          sortField:
            title: Sort field
            type: string
            pattern: "^[A-Za-z0-9_\\.\\- ]+$"
          groupByField:
            title: Group by field
            type: string
            pattern: "^[A-Za-z0-9_\\.\\- ]+$"
          sortDescending:
            title: Sort descending
            type: boolean
            default: false

  sdf2json:
    name: Convert SDF to JSON format
    description: >-
      Converts a SD file to Squonk JSON format
    version: '1.0.0'
    category: virtual screening
    keywords:
    - convert
    - format
    image:
      name: informaticsmatters/vs-prep
      tag: 'latest'
      project-directory: /data
      working-directory: /data
    command: >-
      /code/convert_file.py --input-file '{{ inputFile }}'
      --input-format chemical/x-mdl-sdfile
      --output-file {{ outputFile }}
      --output-format squonk/x-dataset-molecule-v2+json
      --interval 10000
    variables:
      inputs:
        type: object
        required:
        - inputFile
        properties:
          inputFile:
            title: Molecules
            mime-types:
            - chemical/x-mdl-sdfile
            type: file
      outputs:
        type: object
        properties:
          outputFile:
            title: Output file
            mime-types:
            - squonk/x-dataset-molecule-v2+json
            creates: '{{ outputFile }}'
            type: file
            annotation-properties:
              service-execution:
                service_ref: 'https://discourse.squonk.it/t/job-rdk-props/91'
              derived-from: inputFile
      options:
        type: object
        required:
        - outputFile
        properties:
          outputFile:
            title: Output file name
            type: string
            pattern: "^[A-Za-z0-9_/\\.\\-]+\\.json$"

  ####################
  # nextflow jobs
  ####################
  enumerate-candidates:
    name: Enumerate microstates, tautomers and undefined chiral centres
    description: >-
      Enumerate microstates, tautomers and undefined chiral centres. Inputs are defined
      by the prep-enum-conf-lists job.
    version: '1.0.0'
    category: virtual screening
    keywords:
    - rdkit
    - ligand preparation
    - enumeration
    - dimorphite_dl
    - nextflow
    - 3d
    doc-url: https://discourse.squonk.it/t/job-enumerate-candidates/71
    image:
      name: informaticsmatters/vs-nextflow
      tag: 'latest'
      project-directory: /data
      working-directory: /data
      type: nextflow
    command: >-
      nextflow -log {{ DM_INSTANCE_DIRECTORY }}/nextflow.log
      run {{ CODE_DIRECTORY|default('/code') }}/enumerate.nf
      --inputs '{{ inputFile }}'
      --data_dir '{{ dataDir }}'
      -with-trace {{ DM_INSTANCE_DIRECTORY }}/trace.txt
      -with-report {{ DM_INSTANCE_DIRECTORY }}/report.html
    variables:
      inputs:
        type: object
        required:
        - inputFile
        - dataDir
        properties:
          inputFile:
            title: Molecules to enumerate
            mime-types:
            - chemical/x-csv
            type: file
          dataDir:
            title: Directory with sharded data
            type: directory
            default: molecules/sha256
      outputs:
        type: object
        properties:
          enumerated:
            title: Enumerated molecules
            mime-types:
            - chemical/x-csv
            creates: '{{ dataDir }}/*/*/*.smi'
            # additional *.smi files might have already been generated
            type: files
      # there are no options for this job

  generate-low-energy-conformers:
    name: Generate 3D conformers (sharded)
    description: >-
      Generate a low energy 3D conformers of molecules. Inputs are defined
      by the prep-enum-conf-lists job and outputs are written to the sharded file system.
    version: '1.0.0'
    category: virtual screening
    keywords:
    - rdkit
    - ligand preparation
    - conformer
    - nextflow
    - 3d
    doc-url: https://discourse.squonk.it/t/job-generate-low-energy-conformers/86
    image:
      name: informaticsmatters/vs-nextflow
      tag: 'latest'
      project-directory: /data
      working-directory: /data
      type: nextflow
    command: >-
      nextflow -log {{ DM_INSTANCE_DIRECTORY }}/nextflow.log
      run {{ CODE_DIRECTORY|default('/code') }}/le_conformers.nf
      --inputs '{{ inputFile }}'
      --data_dir '{{ dataDir }}'
      -with-trace {{ DM_INSTANCE_DIRECTORY }}/trace.txt
      -with-report {{ DM_INSTANCE_DIRECTORY }}/report.html
    variables:
      inputs:
        type: object
        required:
        - inputFile
        - dataDir
        properties:
          inputFile:
            title: Molecules to process
            mime-types:
            - chemical/x-csv
            type: file
          dataDir:
            title: Directory with sharded data
            type: directory
            default: molecules/sha256
      outputs:
        type: object
        properties:
          enumerated:
            title: 3D conformers
            mime-types:
            - chemical/x-mdl-sdfile
            creates: '{{ dataDir }}/sha256/*/*/*_le_confs.sdf'
            # additional *.sdf files might have already been generated
            type: files
      # there are no options for this job

  run-rdock:
    name: Run rRock docking
    description: >-
      Run rDock docking.
    version: '1.0.0'
    category: virtual screening
    keywords:
    - rdock
    - docking
    - nextflow
    - 3d
    doc-url: https://discourse.squonk.it/t/job-run-rdock/74
    image:
      name: informaticsmatters/vs-nextflow
      tag: 'latest'
      project-directory: /data
      working-directory: /data
      type: nextflow
    command: >-
      nextflow -log {{ DM_INSTANCE_DIRECTORY }}/nextflow.log
      run {{ CODE_DIRECTORY|default('/code') }}/rdock-docking.nf
      --ligands '{{ ligandsSDF }}'
      --protein '{{ proteinMOL2 }}'
      --prmfile '{{ prmFile }}'
      --asfile '{{ asFile }}'
      --num_dockings {{ numDockings }}
      --output_basename {{ outputFile }}
      --mode {{ mode }}
      {% if resultsDir is defined %}--publish_dir {{ resultsDir }}{% endif %}
      -with-trace {{ DM_INSTANCE_DIRECTORY }}/trace.txt
      -with-report {{ DM_INSTANCE_DIRECTORY }}/report.html
    variables:
      order:
        options:
        - resultsDir
        - outputFile
        - ligandsSDF
        - proteinMOL2
        - prmFile
        - asFile
        - numDockings
        - mode
      inputs:
        type: object
        required:
        - ligandsSDF
        - proteinMOL2
        - prmFile
        - asFile
        properties:
          ligandsSDF:
            title: Candidate ligands to process (SDF format)
            mime-types:
            - chemical/x-mdl-sdfile
            type: file
          proteinMOL2:
            title: Prepared receptor (MOL2 format)
            mime-types:
            - chemical/x-mol2
            type: file
          prmFile:
            title: rDock configuration (.prm file)
            mime-types:
            - squonk/x-rdock-prm
            type: file
          asFile:
            title: Cavity definition (.as file)
            mime-types:
            - squonk/x-rdock-as
            type: file
      outputs:
        type: object
        properties:
          dockedSDF:
            title: Docked poses
            mime-types:
            - chemical/x-mdl-sdfile
            creates: '{% if resultsDir is defined %}{{ resultsDir }}/{% endif %}{{ outputFile }}.sdf'
            type: file
      options:
        type: object
        required:
        - numDockings
        - outputFile
        - mode
        properties:
          outputFile:
            title: Base filename for results (no extension)
            type: string
            default: results_rdock
            pattern: "^[A-Za-z0-9_\\.\\-]+$"
          resultsDir:
            title: Dir for results
            type: string
            pattern: "^[A-Za-z0-9_/\\.\\-]*[A-Za-z0-9_\\.\\-]+$"
          numDockings:
            title: Number of dockings
            type: integer
            default: 50
          mode:
            title: Docking mode
            type: string
            default: dock
            enum:
            - dock
            - minimise
            - score
    tests:
      simple-execution:
        inputs:
          ligandsSDF: data/candidates-10.sdf
          proteinMOL2: data/dhfr-receptor-ph7.mol2
          prmFile: data/docking.prm
          asFile: data/docking.as
        options:
          outputFile: rdock_results
          numDockings: 1
          mode: dock
        checks:
          exitCode: 0
          outputs:
          - name: rdock_results.sdf
            checks:
            - exists: true

  run-smina:
    name: Run smina docking
    description: >-
      Run smina docking.
    version: '1.0.0'
    category: virtual screening
    keywords:
    - smina
    - docking
    - nextflow
    - 3d
    doc-url: https://discourse.squonk.it/t/job-run-smina/78
    image:
      name: informaticsmatters/vs-nextflow
      tag: 'latest'
      project-directory: /data
      working-directory: /data
      type: nextflow
    command: >-
      nextflow -log {{ DM_INSTANCE_DIRECTORY }}/nextflow.log
      run {{ CODE_DIRECTORY|default('/code') }}/smina-docking.nf
      --ligands '{{ ligands }}'
      --protein '{{ protein }}'
      --ligand '{{ ligand }}'
      --padding {{ boxPadding }}
      --exhaustiveness {{ exhaustiveness }}
      --scoring_function '{{ scoringFunction }}'
      {% if resultsDir is defined %}--publish_dir '{{ resultsDir }}'{% endif %}
      --output_basename '{{ outputFile }}'
      -with-trace {{ DM_INSTANCE_DIRECTORY }}/trace.txt
      -with-report {{ DM_INSTANCE_DIRECTORY }}/report.html
    variables:
      order:
        options:
        - resultsDir
        - outputFile
        - boxPadding
        - exhaustiveness
        - scoringFunction
      inputs:
        type: object
        required:
        - ligands
        - ligand
        - protein
        properties:
          ligands:
            title: Candidate ligands to process (SDF format)
            mime-types:
            - chemical/x-mdl-sdfile
            type: file
          protein:
            title: Prepared receptor (PDBQT, PDB or MOL2 format)
            mime-types:
            - chemical/x-mol2
            - chemical/x-pdb
            - chemical/x-pdbqt
            type: file
          ligand:
            title: Ligand file for box (PDBQT, PDB, MOL or MOL2 format)
            mime-types:
            - chemical/x-mdl-molfile
            - chemical/x-mol2
            - chemical/x-pdb
            - chemical/x-pdbqt
            type: file
      outputs:
        type: object
        properties:
          dockedSDF:
            title: Docked poses
            mime-types:
            - chemical/x-mdl-sdfile
            creates: '{% if resultsDir is defined %}{{ resultsDir }}/{% endif %}{{ outputFile }}.sdf'
            type: file
            annotation-properties:
              fields-descriptor:
                origin: squonk2-job
                description: Run smina docking
                fields:
                  minimizedAffinity:
                    type: number
                    description: >-
                      Binding affinity predicted by smina docking
                    required: true
                    active: true
              service-execution:
                service_ref: 'https://discourse.squonk.it/t/job-run-smina/78'
              derived-from: ligands
      options:
        type: object
        required:
        - boxPadding
        - exhaustiveness
        - scoringFunction
        - outputFile
        properties:
          resultsDir:
            title: Directory for results
            type: string
            pattern: "^[A-Za-z0-9_/\\.\\-]*[A-Za-z0-9_\\.\\-]+$"
          outputFile:
            title: Base filename for results (no extension)
            type: string
            default: results_smina
            pattern: "^[A-Za-z0-9_\\.\\-]+$"
          boxPadding:
            title: Box definition padding
            type: number
            default: 4.0
          exhaustiveness:
            title: Exhaustiveness setting
            type: integer
            default: 8
          scoringFunction:
            title: Scoring function to use
            type: string
            enum:
            - ad4_scoring
            - dkoes_fast
            - dkoes_scoring
            - dkoes_scoring_old
            - vina
            - vinardo

  oddt-score-interactions:
    name: ODDT rescoring and interactions
    description: >-
      Generate rescoring functions and interactions using ODDT.
    version: '1.0.0'
    category: virtual screening
    keywords:
    - oddt
    - docking
    - nextflow
    - 3d
    doc-url: https://discourse.squonk.it/t/job-oddt-score-interactions/79
    image:
      name: informaticsmatters/vs-nextflow
      tag: 'latest'
      project-directory: /data
      working-directory: /data
      type: nextflow
    command: >-
      nextflow -log {{ DM_INSTANCE_DIRECTORY }}/nextflow.log
      run {{ CODE_DIRECTORY|default('/code') }}/oddt-interactions.nf
      --ligands '{{ ligandsSDF }}'
      --protein '{{ proteinPDB }}'
      {% if resultsDir is defined %}--publish_dir '{{ resultsDir }}'{% endif %}
      --output_filename '{{ outputFile }}'
      -with-trace {{ DM_INSTANCE_DIRECTORY }}/trace.txt
      -with-report {{ DM_INSTANCE_DIRECTORY }}/report.html
    variables:
      inputs:
        type: object
        required:
        - ligandsSDF
        - proteinPDB
        properties:
          ligandsSDF:
            title: Candidate ligands to process (SDF format)
            mime-types:
            - chemical/x-mdl-sdfile
            type: file
          proteinPDB:
            title: Prepared receptor (PDB format)
            mime-types:
            - chemical/x-pdb
            type: file
      outputs:
        type: object
        properties:
          scoredSDF:
            title: Scored poses
            mime-types:
            - chemical/x-mdl-sdfile
            creates: '{% if resultsDir is defined %}{{ resultsDir }}/{% endif %}{{ outputFile }}'
            type: file
      options:
        type: object
        required:
        - outputFile
        properties:
          resultsDir:
            title: Directory for results
            type: string
            pattern: "^[A-Za-z0-9_/\\.\\-]*[A-Za-z0-9_\\.\\-]+$"
          outputFile:
            title: Filename for results
            type: string
            default: oddt_interactions.sdf
            pattern: "^[A-Za-z0-9_\\.\\-]+\\.sdf$"
